export const maxInputSizes = {
	1: 7,
	2: 14,
	3: 24,
	4: 34,
	5: 44,
	6: 58,
	7: 64,
	8: 84,
	9: 98,
	10: 119,
	11: 137,
	12: 155,
	13: 177,
	14: 194,
	15: 220,
	16: 250,
	17: 280,
	18: 310,
	19: 338,
	20: 382,
	21: 403,
	22: 439,
	23: 461,
	24: 511,
	25: 535,
	26: 593,
	27: 625,
	28: 658,
	29: 698,
	30: 742,
	31: 790,
	32: 842,
	33: 898,
	34: 958,
	35: 983,
	36: 1_051,
	37: 1_093,
	38: 1_139,
	39: 1_219,
	40: 1_273,
} as const satisfies Record<number, number>;

export const pxDimensions = {
	1: 21,
	2: 25,
	3: 29,
	4: 33,
	5: 37,
	6: 41,
	7: 45,
	8: 49,
	9: 53,
	10: 57,
	11: 61,
	12: 65,
	13: 69,
	14: 73,
	15: 77,
	16: 81,
	17: 85,
	18: 89,
	19: 93,
	20: 97,
	21: 101,
	22: 105,
	23: 109,
	24: 113,
	25: 117,
	26: 121,
	27: 125,
	28: 129,
	29: 133,
	30: 137,
	31: 141,
	32: 145,
	33: 149,
	34: 153,
	35: 157,
	36: 161,
	37: 165,
	38: 169,
	39: 173,
	40: 177,
} as const satisfies Record<number, number>;

export const totalDataCodewords = {
	1: 9,
	2: 16,
	3: 26,
	4: 36,
	5: 46,
	6: 60,
	7: 66,
	8: 86,
	9: 100,
	10: 122,
	11: 140,
	12: 158,
	13: 180,
	14: 197,
	15: 223,
	16: 253,
	17: 283,
	18: 313,
	19: 341,
	20: 385,
	21: 406,
	22: 442,
	23: 464,
	24: 514,
	25: 538,
	26: 596,
	27: 628,
	28: 661,
	29: 701,
	30: 745,
	31: 793,
	32: 845,
	33: 901,
	34: 961,
	35: 986,
	36: 1_054,
	37: 1_096,
	38: 1_142,
	39: 1_222,
	40: 1_276,
} as const satisfies Record<number, number>;

export const errorCorrectionCodewords = {
	1: 17,
	2: 28,
	3: 22,
	4: 16,
	5: 26,
	6: 18,
	7: 20,
	8: 24,
	9: 30,
	10: 18,
	11: 20,
	12: 24,
	13: 26,
	14: 30,
	15: 22,
	16: 24,
	17: 28,
	18: 30,
	19: 28,
	20: 28,
	21: 28,
	22: 30,
	23: 30,
	24: 30,
	25: 30,
	26: 30,
	27: 30,
	28: 30,
	29: 30,
	30: 30,
	31: 30,
	32: 30,
	33: 30,
	34: 30,
	35: 30,
	36: 30,
	37: 30,
	38: 30,
	39: 30,
	40: 30,
} as const satisfies Record<number, number>;

export function determineVersion(input: string) {
	const byteLength = Buffer.byteLength(input, 'utf8');
	for (let idx = 1; idx <= 40; idx++) {
		if (byteLength <= maxInputSizes[idx as keyof typeof maxInputSizes]) {
			return idx;
		}
	}

	throw new Error('Input too large');
}

export function getTotalDataBits(version: number): number {
	const codewords = totalDataCodewords[version as keyof typeof totalDataCodewords];
	return codewords * 8;
}
